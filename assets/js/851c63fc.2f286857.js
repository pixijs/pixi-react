"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["441"],{4928:function(e,n,t){t.r(n),t.d(n,{default:()=>x,frontMatter:()=>o,metadata:()=>i,assets:()=>c,toc:()=>h,contentTitle:()=>d});var i=JSON.parse('{"id":"components/ParticleContainer","title":"ParticleContainer","description":"NOTE: Writing PixiJS apps in vanilla js (the imperative way) is always more performant.","source":"@site/versioned_docs/version-7.x/components/ParticleContainer.mdx","sourceDirName":"components","slug":"/components/ParticleContainer","permalink":"/7.x/components/ParticleContainer","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/pixi-react/tree/main/docs/versioned_docs/version-7.x/components/ParticleContainer.mdx","tags":[],"version":"7.x","frontMatter":{},"sidebar":"guides","previous":{"title":"NineSlicePlane","permalink":"/7.x/components/NineSlicePlane"},"next":{"title":"SimpleMesh","permalink":"/7.x/components/SimpleMesh"}}'),r=t("4246"),s=t("980"),a=t("482"),l=t("3414");let o={},d="ParticleContainer",c={},h=[{value:"Props",id:"props",level:2},{value:"maxSize",id:"maxsize",level:3},{value:"properties",id:"properties",level:3},{value:"batchSize",id:"batchsize",level:3},{value:"autoResize",id:"autoresize",level:3},{value:"Usage",id:"usage",level:2},{value:"Example",id:"example",level:2}];function p(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"particlecontainer",children:"ParticleContainer"})}),"\n",(0,r.jsx)(n.p,{children:"NOTE: Writing PixiJS apps in vanilla js (the imperative way) is always more performant.\nThe React reconciler needs to pass and validate props which can be costly when dealing with lots of components."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Most of the time you won't notice any difference though (rendering 1000 sprites in a particle container is still fast)."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://pixijs.download/v7.x/docs/PIXI.ParticleContainer.html",children:"https://pixijs.download/v7.x/docs/PIXI.ParticleContainer.html"})}),"\n",(0,r.jsx)(n.h3,{id:"maxsize",children:"maxSize"}),"\n",(0,r.jsx)(n.p,{children:"The maximum number of particles that can be rendered by the container. Affects size of allocated buffers.\nThis will only affect the component once and will be applied during creation."}),"\n",(0,r.jsx)(n.h3,{id:"properties",children:(0,r.jsx)(n.a,{href:"https://pixijs.download/v7.x/docs/PIXI.ParticleContainer.html#ParticleContainer",children:"properties"})}),"\n",(0,r.jsx)(n.p,{children:"The properties of children that should be uploaded to the gpu and applied."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Prop"}),(0,r.jsx)(n.th,{children:"Default Value"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["vertices ",(0,r.jsx)(n.code,{children:"boolean"})]}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsxs)(n.td,{children:["When true, vertices be uploaded and applied. if sprite's ",(0,r.jsx)(n.code,{children:"scale/anchor/trim/frame/orig"})," is dynamic, please set true."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["position ",(0,r.jsx)(n.code,{children:"boolean"})]}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"When true, position be uploaded and applied."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["rotation ",(0,r.jsx)(n.code,{children:"boolean"})]}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"When true, rotation be uploaded and applied."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["uvs ",(0,r.jsx)(n.code,{children:"boolean"})]}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"When true, uvs be uploaded and applied."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["tint ",(0,r.jsx)(n.code,{children:"boolean"})]}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"When true, alpha and tint be uploaded and applied."})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"batchsize",children:"batchSize"}),"\n",(0,r.jsxs)(n.p,{children:["Number of particles per batch. If less than ",(0,r.jsx)(n.code,{children:"maxSize"}),", it uses maxSize instead."]}),"\n",(0,r.jsx)(n.h3,{id:"autoresize",children:"autoResize"}),"\n",(0,r.jsxs)(n.p,{children:["If true, container allocates more batches in case there are more than ",(0,r.jsx)(n.code,{children:"maxSize"})," particles."]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(a.k,{version:"v7",height:350,files:{"App.js":"import { ParticleContainer, Sprite, Stage } from '@pixi/react';\nimport ExampleAssetLoader from './ExampleAssetLoader';\n\nexport default function ParticleContainerExample() {\n    return (\n        <ExampleAssetLoader name='bunny' url='https://react.pixijs.io/img/bunny.png'>\n            <Stage width={300} height={300} options={{ backgroundColor: 0xffffff }}>\n                <ParticleContainer position={[150, 150]} properties={{ position: true }}>\n                    <Sprite anchor={0.5} x={-75} y={-75} image='bunny' />\n                    <Sprite anchor={0.5} x={0} y={0} image='bunny' />\n                    <Sprite anchor={0.5} x={75} y={75} image='bunny' />\n                </ParticleContainer>\n            </Stage>\n        </ExampleAssetLoader>\n    );\n}\n","ExampleAssetLoader.js":l.Z}}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)("iframe",{height:600,scrolling:"no",title:"Particle Container",src:"//codepen.io/inlet/embed/db5dc6ecfb42bbf8dd5322a1015dff70/?height=600&theme-id=33987&default-tab=result&embed-version=2",frameBorder:"no",allowFullScreen:!0,style:{width:"100%"}})]})}function x(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},3414:function(e,n,t){t.d(n,{Z:function(){return i}});let i="import React, { useEffect, useState } from 'react';\nimport { Assets } from 'pixi.js';\n\n// Helper Component to ensure assets are loaded for docusaurus live examples\nconst ExampleAssetLoader = ({ name, url, loader, children }) =>\n{\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    useEffect(() =>\n    {\n        const loadAsset = async () =>\n        {\n            Assets.add(name, url);\n\n            await Assets.load(name);\n            setIsLoaded(true);\n        };\n\n        loadAsset().catch(console.error);\n    }, [name, url]);\n\n    return isLoaded ? children : loader;\n};\n\nexport default ExampleAssetLoader;\n"}}]);