"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["994"],{3186:function(e,n,t){t.r(n),t.d(n,{default:()=>d,frontMatter:()=>c,metadata:()=>i,assets:()=>r,toc:()=>l,contentTitle:()=>a});var i=JSON.parse('{"id":"hooks/useTick","title":"useTick","description":"useTick allows a callback to be attached to the Ticker on the parent application.","source":"@site/docs/hooks/useTick.mdx","sourceDirName":"hooks","slug":"/hooks/useTick","permalink":"/pixi-react/hooks/useTick","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/pixi-react/tree/main/docs/docs/hooks/useTick.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"useExtend","permalink":"/pixi-react/hooks/useExtend"},"next":{"title":"extend","permalink":"/pixi-react/extend"}}'),o=t("4246"),s=t("980");let c={},a=void 0,r={},l=[{value:"\u26A0\uFE0F WARNING \u26A0\uFE0F",id:"\uFE0F-warning-\uFE0F",level:2}];function p(e){let n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"useTick"})," allows a callback to be attached to the ",(0,o.jsx)(n.a,{href:"https://pixijs.download/release/docs/ticker.Ticker.html",children:(0,o.jsx)(n.code,{children:"Ticker"})})," on the parent application."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import {\n    Application,\n    useTick,\n} from '@pixi/react';\n\nconst ChildComponent = () => {\n    useTick(() => console.log('This will be logged on every tick'));\n};\n\nconst MyComponent = () => (\n    <Application>\n        <ChildComponent />\n    </Application>\n);\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"useTick"})," can also accept an options object. This allows control of all ",(0,o.jsx)(n.a,{href:"https://pixijs.download/release/docs/ticker.Ticker.html#add",children:(0,o.jsx)(n.code,{children:"ticker.add"})})," options, as well as adding the ",(0,o.jsx)(n.code,{children:"isEnabled"})," option. Setting ",(0,o.jsx)(n.code,{children:"isEnabled"})," to ",(0,o.jsx)(n.code,{children:"false"})," will cause the callback to be disabled until the argument is changed to true again."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import {\n    Application,\n    useTick,\n} from '@pixi/react';\nimport { UPDATE_PRIORITY } from 'pixi.js'\nimport { useRef } from 'react'\n\nconst ChildComponent = () => {\n    const spriteRef = useRef(null)\n\n    useTick({\n        callback() {\n            // this === context\n            this.current.rotation += 1\n        },\n        context: spriteRef,\n        isEnabled: true,\n        priority: UPDATE_PRIORITY.HIGH,\n    })\n\n    return <pixiSprite ref={spriteRef} />\n};\n\nconst MyComponent = () => (\n    <Application>\n        <ChildComponent />\n    </Application>\n);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"\uFE0F-warning-\uFE0F",children:"\u26A0\uFE0F WARNING \u26A0\uFE0F"}),"\n",(0,o.jsxs)(n.p,{children:["The callback passed to ",(0,o.jsx)(n.code,{children:"useTick"})," ",(0,o.jsx)(n.strong,{children:"is not memoised"}),". This can cause issues where your callback is being removed and added back to the ticker on every frame if you're mutating state in a component where ",(0,o.jsx)(n.code,{children:"useTick"})," is using a non-memoised function. For example, this issue would affect the component below because we are mutating the state, causing the component to re-render constantly:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import {\n    Application,\n    useTick,\n} from '@pixi/react';\nimport { useState } from 'react'\n\nconst ChildComponent = () => {\n    const [rotation, setRotation] = useState(0)\n\n    useTick(() => setRotation(previousState => previousState + 1));\n\n    return <pixiSprite rotation={rotation} />;\n};\n\nconst MyComponent = () => (\n    <Application>\n        <ChildComponent />\n    </Application>\n);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This issue can be solved by memoising the callback passed to ",(0,o.jsx)(n.code,{children:"useTick"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import {\n    Application,\n    useTick,\n} from '@pixi/react';\nimport { useCallback, useState } from 'react'\n\nconst ChildComponent = () => {\n    const [rotation, setRotation] = useState(0)\n\n    const animateRotation = useCallback(() => setRotation(previousState => previousState + 1), []);\n\n    useTick(animateRotation);\n\n    return <pixiSprite rotation={rotation} />;\n};\n\nconst MyComponent = () => (\n    <Application>\n        <ChildComponent />\n    </Application>\n);\n"})})]})}function d(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);