"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["804"],{5755:function(e,t,i){i.r(t),i.d(t,{default:()=>h,frontMatter:()=>c,metadata:()=>n,assets:()=>d,toc:()=>u,contentTitle:()=>l});var n=JSON.parse('{"id":"getting-started","title":"Getting Started","description":"To add @pixi/react to an existing React application, install the necessary dependencies:","source":"@site/docs/getting-started.mdx","sourceDirName":".","slug":"/getting-started","permalink":"/pixi-react/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/pixi-react/tree/main/docs/docs/getting-started.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Getting Started"},"sidebar":"docs","next":{"title":"Application","permalink":"/pixi-react/components/application"}}'),s=i("4246"),r=i("980"),a=i("482"),o=i("1065"),p=i("5172");let c={sidebar_position:1,title:"Getting Started"},l=void 0,d={},u=[{value:"Does it have limitations?",id:"does-it-have-limitations",level:2},{value:"Can it keep up with frequent feature updates to Pixi.js?",id:"can-it-keep-up-with-frequent-feature-updates-to-pixijs",level:2},{value:"What does it look like?",id:"what-does-it-look-like",level:2}];function x(e){let t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["To add ",(0,s.jsx)(t.code,{children:"@pixi/react"})," to an existing React application, install the necessary dependencies:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"npm install pixi.js@^8.2.6 @pixi/react@beta\n"})}),"\n",(0,s.jsx)(t.h2,{id:"does-it-have-limitations",children:"Does it have limitations?"}),"\n",(0,s.jsx)(t.p,{children:"None. Everything that works in Pixi.js will work here without exception."}),"\n","\n","\n",(0,s.jsx)(t.h2,{id:"can-it-keep-up-with-frequent-feature-updates-to-pixijs",children:"Can it keep up with frequent feature updates to Pixi.js?"}),"\n",(0,s.jsxs)(t.p,{children:["Yes. ",(0,s.jsx)(t.code,{children:"@pixi/react"})," is a thin wrapper around Pixi.js, allowing it to be expressed via JSX. For example, ",(0,s.jsx)(t.code,{children:"<pixiSprite>"})," is backed by a Pixi.js ",(0,s.jsx)(t.a,{href:"https://pixijs.download/release/docs/scene.Sprite.html",children:(0,s.jsx)(t.code,{children:"Sprite"})}),". If a feature is added, removed, or changed in Pixi.js, those changes will be available to you without updating ",(0,s.jsx)(t.code,{children:"@pixi/react"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"what-does-it-look-like",children:"What does it look like?"}),"\n",(0,s.jsx)(t.p,{children:"Let's make a reusable component that has its own state, reacts to user-input and participates in the render-loop:"}),"\n",(0,s.jsx)(a.k,{files:{"App.js":o.Z,"BunnySprite.js":p.Z},viewType:"both",width:"100%"})]})}function h(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}},1065:function(e,t,i){i.d(t,{Z:function(){return n}});let n="import {\n    Application,\n    extend,\n} from '@pixi/react';\nimport {\n    Container,\n    Graphics,\n    Sprite,\n} from 'pixi.js';\n\nimport { BunnySprite } from './BunnySprite'\n\n// extend tells @pixi/react what Pixi.js components are available\nextend({\n    Container,\n    Graphics,\n    Sprite,\n});\n\nexport default function App() {\n    return (\n        // We'll wrap our components with an <Application> component to provide\n        // the Pixi.js Application context\n        <Application>\n            <BunnySprite />\n        </Application>\n    );\n}\n"},5172:function(e,t,i){i.d(t,{Z:function(){return n}});let n="import {\n    Assets,\n    Texture,\n} from 'pixi.js';\nimport {\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { useTick } from '@pixi/react';\n\nexport function BunnySprite() {\n    // The Pixi.js `Sprite`\n    const spriteRef = useRef(null)\n\n    const [texture, setTexture] = useState(Texture.EMPTY)\n    const [isHovered, setIsHover] = useState(false)\n    const [isActive, setIsActive] = useState(false)\n\n    // Preload the sprite if it hasn't been loaded yet\n    useEffect(() => {\n        if (texture === Texture.EMPTY) {\n            Assets\n                .load('https://pixijs.com/assets/bunny.png')\n                .then((result) => {\n                    setTexture(result)\n                });\n        }\n    }, [texture]);\n\n    return (\n        <pixiSprite\n            ref={spriteRef}\n            anchor={0.5}\n            eventMode={'static'}\n            onClick={(event) => setIsActive(!isActive)}\n            onPointerOver={(event) => setIsHover(true)}\n            onPointerOut={(event) => setIsHover(false)}\n            scale={isActive ? 1 : 1.5}\n            texture={texture}\n            x={100}\n            y={100} />\n    );\n}\n"}}]);