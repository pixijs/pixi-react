"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["578"],{5513:function(n,e,t){t.r(e),t.d(e,{default:()=>g,frontMatter:()=>s,metadata:()=>i,assets:()=>c,toc:()=>d,contentTitle:()=>p});var i=JSON.parse('{"id":"react-spring","title":"React Spring","description":"Use \\"@pixi/react-animated\\" to import react-spring animated components.","source":"@site/versioned_docs/version-7.x/react-spring.mdx","sourceDirName":".","slug":"/react-spring","permalink":"/pixi-react/7.x/react-spring","draft":false,"unlisted":false,"editUrl":"https://github.com/pixijs/pixi-react/tree/main/docs/versioned_docs/version-7.x/react-spring.mdx","tags":[],"version":"7.x","frontMatter":{},"sidebar":"guides","previous":{"title":"Hooks","permalink":"/pixi-react/7.x/hooks/"},"next":{"title":"Render","permalink":"/pixi-react/7.x/render/"}}'),r=t("4246"),a=t("980"),o=t("482");let s={},p="React Spring",c={},d=[{value:"Usage",id:"usage",level:2},{value:"Example",id:"example",level:2},{value:"Animating <code>tint</code> values",id:"animating-tint-values",level:2}];function m(n){let e={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"react-spring",children:"React Spring"})}),"\n",(0,r.jsxs)(e.p,{children:["Use ",(0,r.jsx)(e.code,{children:'"@pixi/react-animated"'})," to import react-spring animated components."]}),"\n",(0,r.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"import React from 'react';\nimport { Spring } from 'react-spring';\nimport { Texture } from 'pixi.js';\nimport { Stage, Sprite } from '@pixi/react-animated';\n\nconst App = () => (\n    <Stage>\n        <Spring native from={{ x: 0, y: 0 }} to={{ x: 200, y: 200 }}>\n            {(props) => <Sprite texture={Texture.WHITE} tint={0xff0000} {...props} />}\n        </Spring>\n    </Stage>\n);\n"})}),"\n",(0,r.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(e.p,{children:"Click anywhere to animate"}),"\n",(0,r.jsx)(o.k,{version:"v7",height:500,files:{"App.js":"import * as ReactPixiAnimated from '@pixi/react-animated';\nimport { Texture } from 'pixi.js';\nimport { useState } from 'react';\nimport { Spring } from 'react-spring';\nimport { Stage } from '@pixi/react';\n\nconst config = {\n    size: { width: 800, height: 500 },\n    spring: { mass: 10, tension: 1000, friction: 100 },\n    stage: { antialias: true, backgroundColor: 0x1099bb },\n};\n\nconst set = () => ({\n    x: Math.random() * config.size.width,\n    y: Math.random() * config.size.height,\n    rotation: Math.random() * 10,\n    scale: Math.max(1, Math.random() * 10),\n});\n\nconst Box = (props) => (\n    <Spring native to={props} config={config.spring}>\n        {(props) => <ReactPixiAnimated.Sprite texture={Texture.WHITE} tint={0xaddb67} anchor={0.5} {...props} />}\n    </Spring>\n);\n\nexport default function ReactSpringExample() {\n    const [transform, setTransform] = useState(set);\n    return (\n        <Stage {...config.size} options={config.stage} onPointerUp={() => setTransform(set)}>\n            <Box {...transform} />\n        </Stage>\n    );\n}\n"},dependencies:{"@pixi/react-animated":"^7","react-spring":"^9","pixi.js":"^7","@pixi/react":"^7"}}),"\n",(0,r.jsxs)(e.h2,{id:"animating-tint-values",children:["Animating ",(0,r.jsx)(e.code,{children:"tint"})," values"]}),"\n",(0,r.jsx)(o.k,{version:"v7",height:500,files:{"App.js":"import * as ReactPixiAnimated from '@pixi/react-animated';\nimport { Texture, utils } from 'pixi.js';\nimport { useState } from 'react';\nimport { Spring } from 'react-spring';\nimport { Stage } from '@pixi/react';\n\nconst config = {\n    size: { width: 800, height: 500 },\n    stage: { antialias: true, backgroundColor: 0x1099bb },\n};\n\nconst toHex = (color) =>\n    /^#/.test(color)\n        ? utils.string2hex(color)\n        : utils.rgb2hex(\n              color\n                  .replace(/^rgba?\\(|\\s+|\\)$/g, '')\n                  .split(',')\n                  .map((val) => val / 255),\n          );\n\nconst set = () => ({\n    x: Math.random() * config.size.width,\n    y: Math.random() * config.size.height,\n    rotation: Math.random() * 10,\n    scale: Math.max(1, Math.random() * 10),\n    tint: '#' + Math.floor(Math.random() * 16777215).toString(16),\n});\n\nexport default function App() {\n    const [props, setProps] = useState(set);\n\n    return (\n        <Stage\n            width={config.size.width}\n            height={config.size.height}\n            options={config.stage}\n            onPointerUp={() => setProps(set)}\n        >\n            <Spring native to={props}>\n                {({ tint, ...props }) => (\n                    <ReactPixiAnimated.Sprite\n                        anchor={0.5}\n                        width={100}\n                        height={100}\n                        texture={Texture.WHITE}\n                        tint={tint.to((color) => toHex(color))}\n                        {...props}\n                    />\n                )}\n            </Spring>\n        </Stage>\n    );\n}\n"},dependencies:{"@pixi/react-animated":"^7","react-spring":"^9","pixi.js":"^7","@pixi/react":"^7"}})]})}function g(n={}){let{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(m,{...n})}):m(n)}}}]);