"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["279"],{7293:function(e){e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"v8.x","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","label":"Getting Started","href":"/getting-started","docId":"getting-started","unlisted":false},{"type":"category","label":"Components","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Application","href":"/components/application","docId":"components/application","unlisted":false},{"type":"link","label":"Pixi.js Components","href":"/components/pixi-components","docId":"components/pixi-components","unlisted":false},{"type":"link","label":"Custom Components","href":"/components/custom-components","docId":"components/custom-components","unlisted":false}]},{"type":"category","label":"Hooks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"useApplication","href":"/hooks/useApplication","docId":"hooks/useApplication","unlisted":false},{"type":"link","label":"useExtend","href":"/hooks/useExtend","docId":"hooks/useExtend","unlisted":false},{"type":"link","label":"useTick","href":"/hooks/useTick","docId":"hooks/useTick","unlisted":false}]},{"type":"link","label":"extend","href":"/extend","docId":"extend","unlisted":false},{"type":"link","label":"Typescript","href":"/typescript","docId":"typescript","unlisted":false}]},"docs":{"components/application":{"id":"components/application","title":"Application","description":"The ` component is used to wrap your @pixi/react app. The  component can take all props that can be set on PIXI.Application`.","sidebar":"docs"},"components/custom-components":{"id":"components/custom-components","title":"Custom Components","description":"Custom components are supported via the extend API. For example, you can create a ` component using the pixi-viewport` library:","sidebar":"docs"},"components/pixi-components":{"id":"components/pixi-components","title":"Pixi.js Components","description":"All Pixi.js classes should be available as components. They should also be included in your IDE\'s intellisense/autocomplete once you\'ve installed/imported @pixi/react. So long as it\'s exported from Pixi.js, it\'s supported as a component with the pixi prefix. Here\'s a selection of commonly used components:","sidebar":"docs"},"extend":{"id":"extend","title":"extend","description":"One of the most important concepts to understand with v8 is extend. Normally @pixi/react would have to import all pf Pixi.js to be able to provide the full library as JSX components. Instead, we use an internal catalogue of components populated by the extend API. This allows you to define exactly which parts of Pixi.js you want to import, keeping your bundle sizes small.","sidebar":"docs"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"To add @pixi/react to an existing React application, install the necessary dependencies:","sidebar":"docs"},"hooks/useApplication":{"id":"hooks/useApplication","title":"useApplication","description":"useApplication allows access to the parent PIXI.Application created by the ` component. This hook will not work outside of an  component. Additionally, the parent application is passed via React Context. This means useApplication will only work appropriately in child components, and in the same component that creates the `.","sidebar":"docs"},"hooks/useExtend":{"id":"hooks/useExtend","title":"useExtend","description":"useExtend allows the extend API to be used as a React hook. Additionally, the useExtend hook is memoised, while the extend function is not.","sidebar":"docs"},"hooks/useTick":{"id":"hooks/useTick","title":"useTick","description":"useTick allows a callback to be attached to the Ticker on the parent application.","sidebar":"docs"},"typescript":{"id":"typescript","title":"Typescript","description":"Extending Built-in Components","sidebar":"docs"}}}}')}}]);